{"version":3,"sources":["component/Navbar.js","component/ALerts.js","component/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","onClick","green","style","height","width","red","togglemode","htmlFor","ALerts","alerts","role","word","small","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","settext","Fragment","color","heading","value","onChange","event","target","backgroundColor","rows","newtext","split","join","document","getElementById","select","navigator","clipboard","writeText","filter","t","length","App","setMode","_useState3","_useState4","alert","setAlert","showAlerts","message","setTimeout","removebgcolor","body","classList","remove","aboutText","add","component_ALerts","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.abcb6281.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import {Link } from 'react-router-dom';\r\n\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    \r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode} `}>\r\n        <div className=\"container-fluid text-primary\">\r\n          <a className={`navbar-brand text-${props.mode==='light'?'dark':'light'}`} href=\"#\">{props.title}</a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          \r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className={`nav-link navbar-brand text-${props.mode==='light'?'dark':'light'}`}  href=\"#\">Home</a>\r\n              </li>\r\n              {/* <li className=\"nav-item\">\r\n                <Link className={`nav-link navbar-brand text-${props.mode==='light'?'dark':'light'}`} to=\"/acordian\">{props.aboutText}</Link>\r\n              </li> */}\r\n      \r\n            </ul>\r\n            {/* <form className=\"d-flex\" role=\"search\">\r\n              <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n              <button className=\"btn btn-outline-primary btn-light\" type=\"submit\">Search</button>\r\n            </form> */}\r\n            <div className='d-flex'>\r\n                <div className='bg-primary rounded mx-2' onClick={props.green} style={{height:'30px', width:'30px'}}></div>\r\n                <div className='bg-danger rounded mx-2' onClick={props.red} style={{height:'30px', width:'30px'}}></div>\r\n            </div>\r\n                <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n                    <input className=\"form-check-input\" type=\"checkbox\"  onClick={props.togglemode} id=\"flexSwitchCheckDefault\"/>\r\n                    <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Mode</label>\r\n                </div>\r\n          </div>\r\n        </div>\r\n    </nav>\r\n    \r\n  )\r\n}\r\n\r\nNavbar.propTypes = {title:PropTypes.string.isRequired,\r\n        aboutText:PropTypes.string\r\n}\r\n\r\n\r\n// Navbar.defaultProps = {\r\n//     title: 'Title set here',\r\n//     aboutText: 'Contact set here'\r\n// }","import React from 'react'\r\n\r\nfunction ALerts(props) {\r\n  const capitalize=(word)=>{\r\n      const small = word.toLowerCase();\r\n      return small.charAt(0).toUpperCase() + small.slice(1);\r\n  }\r\n  return (\r\n    props.alerts && <div className={`alert alert-${props.alerts.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{capitalize(props.alerts.type)}</strong> {props.alerts.msg}\r\n       \r\n        \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ALerts","import React, {useState} from 'react'\r\nexport default function TextForm(props) {\r\n    const handlebtnclick = () =>{\r\n        let newtext = text.toUpperCase();\r\n        settext(newtext);\r\n        props.alerts('Text Converted to uppercase', 'success')\r\n    }\r\n\r\n    const handlebtnlwclick = () =>{\r\n        let newtext = text.toLowerCase();\r\n        settext(newtext);\r\n        props.alerts('Text Converted to lowercase', 'success')\r\n    }\r\n\r\n    const handlebtclwclick = () =>{\r\n        let newtext = '';\r\n        settext(newtext);\r\n        props.alerts('Text cleared', 'success')\r\n    }\r\n\r\n    // const handleboltwclick = () =>{\r\n    //     let newtext = document.getElementById('mytext')\r\n    //     let bold = newtext.value\r\n    //     bold = {\r\n    //         color: 'red',\r\n    //         backgourndColor: 'black',\r\n    //         fontSize: '20px'\r\n\r\n    //     }\r\n    //     settext(bold);\r\n    // }\r\n\r\n    const hndlextraspcsclick = () =>{\r\n        let newtext = text.split(/[ ]+/);\r\n        settext(newtext.join(\" \"));\r\n        props.alerts('Removed Extra spaces', 'success')\r\n       \r\n    }\r\n\r\n    const hndlcopytextclick = () =>{\r\n        let newtext = document.getElementById('mytext');\r\n        newtext.select();\r\n        navigator.clipboard.writeText(newtext.value);\r\n        props.alerts('Text copied', 'success')\r\n    }\r\n\r\n\r\n\r\n    const handletextchange = (event) =>{\r\n\r\n        settext(event.target.value)\r\n\r\n    }\r\n\r\n    const [text, settext] = useState('')\r\n\r\n  return (\r\n        <>\r\n        <div className=\"container\" style={{color: props.mode==='dark'?'white':'black'}}>\r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n            <textarea className=\"form-control\"  value={text} onChange={handletextchange} style={{backgroundColor:props.mode==='dark'?'white':'grey', color: props.mode==='dark'?'black':'white'}} id=\"mytext\" rows=\"6\"></textarea>\r\n            <button className='btn btn-primary  my-3' onClick={handlebtnclick} >Convert To Upper</button>\r\n            <button className='btn btn-primary  mx-2' onClick={handlebtnlwclick} >Convert To Lower</button>\r\n            <button className='btn btn-primary  mx-2' onClick={handlebtclwclick} >Clear Text</button>\r\n            {/* <button className='btn btn-primary  mx-2' onClick={handleboltwclick}>Bold Text</button> */}\r\n            <button className='btn btn-primary  mx-2' onClick={hndlextraspcsclick}>Remove Extra spaces</button>\r\n            <button className='btn btn-primary  mx-2' onClick={hndlcopytextclick}>Copy text</button>\r\n            </div>\r\n        </div>\r\n        <div className='container'  style={{color: props.mode==='dark'?'white':'black'}}>\r\n              <h2>Words and Characters Counting</h2>\r\n              <p><b>{text.split(\" \").filter((t)=>1!==\"\").length}</b> Words and <b>{text.length}</b> Characters</p>\r\n              <h1>PREVIEW</h1>\r\n               <p>{text}</p>\r\n        </div>\r\n        </>\r\n  )\r\n}\r\n","\nimport React, { useState } from 'react'\nimport './App.css';\n// import Acordian from './component/Acordian';\nimport Navbar from './component/Navbar';\nimport ALerts from './component/ALerts';\nimport TextForm from './component/TextForm';\n// import {\n//   BrowserRouter,\n//   Routes,\n//   Route} from \"react-router-dom\";\n\n  \nfunction App() {\n  const [mode, setMode] = useState('light')\n  const [alert, setAlert] = useState(null)\n\n\n  const showAlerts = (message, type)=>{\n      setAlert({\n          msg : message,\n          type  : type\n \n      })\n      setTimeout(() => {\n        setAlert(null)\n      }, 1500);\n  }\n\n  const togglemode=()=>{\n    if (mode==='light'){\n      setMode('dark')\n      document.body.style.backgroundColor='#035d42'\n      showAlerts('Enable Dark Mode', 'success')\n    }\n    else{\n      setMode('light')\n      document.body.style.backgroundColor='white'\n      showAlerts('Enable Light Mode', 'success')\n    }\n  }\n\n  const removebgcolor=()=>{\n    document.body.classList.remove('bg-primary')\n    document.body.classList.remove('bg-danger')\n  }\n\n  const greencolor = () =>{\n    removebgcolor();\n    document.body.classList.add('bg-primary');\n  }\n\n  const redcolor = () =>{\n    removebgcolor();\n    document.body.classList.add('bg-danger');\n  }\n\n  return (\n    <>\n  \n  {/* <BrowserRouter> */}\n  \n    <Navbar title=\"Blog system\" aboutText='About Us'  mode={mode} togglemode={togglemode} green={greencolor} red={redcolor}/>\n    <ALerts alerts = {alert}/>\n      <div className='container'> \n      {/* <Routes>\n\n      <Route path=\"/\" element={<TextForm heading = 'Enter Text Analyst' mode={mode} alerts = {showAlerts}/>} />\n      <Route path=\"/acordian\" element={ <Acordian/>} />   */}\n      <TextForm heading = 'Enter Text Analyst' mode={mode} alerts = {showAlerts}/>\n      {/* <Acordian/>  */}\n      {/* </Routes>  */}\n      </div>\n      \n      {/* </BrowserRouter>  */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}