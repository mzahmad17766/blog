{"version":3,"sources":["Acordian.js","Navbar.js","ALerts.js","TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Acordian","props","_useState","useState","color","backgroundColor","_useState2","Object","slicedToArray","mystyle","setMyStyle","_useState3","_useState4","myBtn","setMyBtn","react_default","a","createElement","Fragment","className","style","id","title","type","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","aria-labelledby","data-bs-parent","onClick","Navbar","concat","mode","react_router_dom","to","aria-label","green","height","width","red","togglemode","htmlFor","ALerts","alerts","role","word","small","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","TextForm","text","settext","heading","value","onChange","event","target","placeholder","input","rows","disabled","length","newtext","document","getElementById","fontSize","split","join","navigator","clipboard","writeText","filter","t","App","setMode","alert","setAlert","showAlerts","message","setTimeout","removebgcolor","body","classList","remove","aboutText","add","src_ALerts","react_router","path","element","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.f34e26c2.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\n\r\n\r\n\r\n\r\nexport default function Acordian(props) {\r\n\r\n    const [mystyle, setMyStyle]=useState({\r\n        color:'black',\r\n        backgroundColor: 'white'\r\n        \r\n    })\r\n    \r\n    const [myBtn, setMyBtn] = useState('Enable Dark Mode')\r\n    \r\n    const togglemode = ()=>{\r\n         if (mystyle.color ==='white'){\r\n            setMyStyle({\r\n                color:'black',\r\n                backgroundColor: 'white'\r\n                \r\n            })\r\n            setMyBtn('Enable Dark Mode')\r\n         }\r\n         else{\r\n            setMyStyle({\r\n                color:'white',\r\n                backgroundColor: 'black',\r\n                \r\n            })\r\n            setMyBtn('Enable Light Mode')\r\n        }\r\n    \r\n    }\r\n\r\n  return (\r\n    <>\r\n    <div className='container my-3' style={mystyle}>\r\n            <div className=\"accordion\" id=\"accordionExample\"  >\r\n                <div className=\"accordion-item\" style={mystyle}>\r\n                <h1 style={mystyle}>{props.title}</h1>\r\n                <h2 className=\"accordion-header\" id=\"headingOne\" >\r\n            <button className=\"accordion-button\" style={mystyle}   type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                Accordion Item #1\r\n            </button>\r\n            </h2>\r\n            <div id=\"collapseOne\"   className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n            <div className=\"accordion-body\">\r\n                <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n            </div>\r\n            </div>\r\n        </div>\r\n        <div className=\"accordion-item\" style={mystyle}>\r\n            <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n            <button className=\"accordion-button collapsed\" style={mystyle}  type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                Accordion Item #2\r\n            </button>\r\n            </h2>\r\n            <div id=\"collapseTwo\"  className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n            <div className=\"accordion-body\">\r\n                <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n            </div>\r\n            </div>\r\n        </div>\r\n        <div className=\"accordion-item\" style={mystyle}>\r\n            <h2 className=\"accordion-header\" id=\"headingThree\">\r\n            <button className=\"accordion-button collapsed\" style={mystyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                Accordion Item #3\r\n            </button>\r\n            </h2>\r\n            <div id=\"collapseThree\"  className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n            <div className=\"accordion-body\" >\r\n                <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n            </div>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        \r\n    </div>\r\n    <div>\r\n    <div className=\"btn btn-primary mx-3\" onClick={togglemode}>{myBtn}</div>\r\n</div>\r\n</>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {Link } from 'react-router-dom';\r\n\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    \r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode} `}>\r\n        <div className=\"container-fluid text-primary\">\r\n          <Link className={`navbar-brand text-${props.mode==='light'?'dark':'light'}`} to=\"/\">{props.title}</Link>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          \r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <Link className={`nav-link navbar-brand text-${props.mode==='light'?'dark':'light'}`}  to=\"/\">Home</Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link className={`nav-link navbar-brand text-${props.mode==='light'?'dark':'light'}`} to=\"/about\">About Us</Link>\r\n              </li>\r\n      \r\n            </ul>\r\n            {/* <form className=\"d-flex\" role=\"search\">\r\n              <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n              <button className=\"btn btn-outline-primary btn-light\" type=\"submit\">Search</button>\r\n            </form> */}\r\n            <div className='d-flex'>\r\n                <div className='bg-primary rounded mx-2' onClick={props.green} style={{height:'30px', width:'30px'}}></div>\r\n                <div className='bg-danger rounded mx-2' onClick={props.red} style={{height:'30px', width:'30px'}}></div>\r\n            </div>\r\n                <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n                    <input className=\"form-check-input\" type=\"checkbox\"  onClick={props.togglemode} id=\"flexSwitchCheckDefault\"/>\r\n                    <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Mode</label>\r\n                </div>\r\n          </div>\r\n        </div>\r\n    </nav>\r\n    \r\n  )\r\n}\r\n\r\nNavbar.propTypes = {title:PropTypes.string.isRequired,\r\n        aboutText:PropTypes.string\r\n}\r\n\r\n\r\n// Navbar.defaultProps = {\r\n//     title: 'Title set here',\r\n//     aboutText: 'Contact set here'\r\n// }","import React from 'react'\r\n\r\nfunction ALerts(props) {\r\n  const capitalize=(word)=>{\r\n      const small = word.toLowerCase();\r\n      return small.charAt(0).toUpperCase() + small.slice(1);\r\n  }\r\n  return (\r\n    <div style={{height:'60px'}}>\r\n    {props.alerts && <div className={`alert alert-${props.alerts.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{capitalize(props.alerts.type)}</strong> {props.alerts.msg}\r\n    </div>}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ALerts","import React, {useState} from 'react'\r\nexport default function TextForm(props) {\r\n    const handlebtnclick = () =>{\r\n        let newtext = text.toUpperCase();\r\n        settext(newtext);\r\n        props.alerts('Text Converted to uppercase', 'success')\r\n    }\r\n\r\n    const handlebtnlwclick = () =>{\r\n        let newtext = text.toLowerCase();\r\n        settext(newtext);\r\n        props.alerts('Text Converted to lowercase', 'success')\r\n    }\r\n\r\n    const handlebtclwclick = () =>{\r\n        let newtext = '';\r\n        settext(newtext);\r\n        props.alerts('Text cleared', 'success')\r\n    }\r\n    // const resetdefaultbutton = (e) =>{\r\n    //     let newtext = keydown(if (e.keyCode == 13){ \r\n    //             document.getElementById('mytext').reset();\r\n    //         }\r\n    //     )\r\n   \r\n    // }\r\n\r\n    const handlelargetextclick = () =>{\r\n        var newtext=document.getElementById(\"mytext\");\r\n        newtext.style.fontSize='xx-large';\r\n        settext(newtext.value);\r\n    }\r\n    const handlesmalltextclick = () =>{\r\n        var newtext=document.getElementById(\"mytext\");\r\n        newtext.style.fontSize='xx-small';\r\n        settext(newtext.value);\r\n    }\r\n\r\n    const hndlextraspcsclick = () =>{\r\n        let newtext = text.split(/[ ]+/);\r\n        settext(newtext.join(\" \"));\r\n        props.alerts('Removed Extra spaces', 'success')\r\n       \r\n    }\r\n\r\n    const hndlcopytextclick = () =>{\r\n        // let newtext = document.getElementById('mytext');\r\n        // newtext.select();\r\n        navigator.clipboard.writeText(text)//newtext.value);\r\n        // document.getSelection().removeAllRanges();\r\n        props.alerts('Text copied', 'success')\r\n    }\r\n\r\n\r\n\r\n    const handletextchange = (event) =>{\r\n\r\n        settext(event.target.value)\r\n\r\n    }\r\n\r\n    const [text, settext] = useState('')\r\n\r\n  return (\r\n        <>\r\n        <div className=\"container\" style={{color: props.mode==='dark'?'white':'black'}}>\r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n            <textarea className=\"form-control\"   value={text} onChange={handletextchange} style={{backgroundColor:props.mode==='dark'?'white':'#262c2a', color: props.mode==='dark'?'black':'white'}} placeholder={props.input} id=\"mytext\" rows=\"6\"></textarea>\r\n            <button disabled={text.length===0} className='btn btn-primary  my-3 my-1' onClick={handlebtnclick} >Convert To Upper</button>\r\n            <button disabled={text.length===0} className='btn btn-primary  mx-2 my-1' onClick={handlebtnlwclick} >Convert To Lower</button>\r\n            <button disabled={text.length===0} className='btn btn-primary  mx-2 my-1' onClick={handlebtclwclick} >Clear Text</button>\r\n            <button disabled={text.length===0} className='btn btn-primary  mx-2' onClick={handlelargetextclick}>Large Text</button>\r\n            <button disabled={text.length===0} className='btn btn-primary  mx-2' onClick={handlesmalltextclick}>Small Text</button>\r\n            <button disabled={text.length===0} className='btn btn-primary  mx-2 my-1' onClick={hndlextraspcsclick}>Remove Extra spaces</button>\r\n            <button disabled={text.length===0} className='btn btn-primary  mx-2 my-1' onClick={hndlcopytextclick}>Copy text</button>\r\n            </div>\r\n        </div>\r\n        <div className='container'  style={{color: props.mode==='dark'?'white':'black'}}>\r\n              <h2>Words and Characters Counting</h2>\r\n              <p><b>{text.split(/\\s+/).filter((t)=>{return t.length!==0}).length}</b> Words and <b>{text.length}</b> Characters</p>\r\n              <h1>PREVIEW</h1>\r\n               <p>{text}</p>\r\n        </div> \r\n        </>\r\n  )\r\n}\r\n","\nimport React, { useState } from 'react'\nimport './App.css';\nimport Acordian from './Acordian';\nimport Navbar from './Navbar';\nimport ALerts from './ALerts';\nimport TextForm from './TextForm';\nimport {\n  BrowserRouter,\n  Routes,\n  Route} from \"react-router-dom\";\n\n  \nfunction App() {\n  const [mode, setMode] = useState('light')\n  const [alert, setAlert] = useState(null)\n\n\n  const showAlerts = (message, type)=>{\n      setAlert({\n          msg : message,\n          type  : type\n \n      })\n      setTimeout(() => {\n        setAlert(null)\n      }, 1500);\n  }\n\n  const togglemode=()=>{\n    if (mode==='light'){\n      setMode('dark')\n      document.body.style.backgroundColor='#035d42'\n      showAlerts('Enable Dark Mode', 'success')\n    }\n    else{\n      setMode('light')\n      document.body.style.backgroundColor='white'\n      showAlerts('Enable Light Mode', 'success')\n    }\n  }\n\n  const removebgcolor=()=>{\n    document.body.classList.remove('bg-primary')\n    document.body.classList.remove('bg-danger')\n  }\n\n  const greencolor = () =>{\n    removebgcolor();\n    document.body.classList.add('bg-primary');\n  }\n\n  const redcolor = () =>{\n    removebgcolor();\n    document.body.classList.add('bg-danger');\n  }\n\n  return (\n    <>\n  \n  <BrowserRouter>\n  \n    <Navbar title=\"Blog system\" aboutText='About Us'  mode={mode} togglemode={togglemode} green={greencolor} red={redcolor}/>\n    <ALerts alerts = {alert}/>\n      <div className='container'> \n      <Routes>\n\n          <Route path=\"/\" element={<TextForm alerts= {showAlerts} heading = 'Enter Text Analyst' input='Enter Text To Enable Button for Function' mode={mode}/>} />\n          <Route path=\"/about\" element={ <Acordian/>} />  \n          {/* <TextForm heading = 'Enter Text Analyst' mode={mode} alerts = {showAlerts}/>\n          <Acordian/>  */}\n      </Routes> \n      </div>\n      \n  </BrowserRouter> \n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}